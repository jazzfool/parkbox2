#version 450

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(binding = 0) uniform samplerCube env_map;
layout(binding = 1, rgba32f) uniform imageCube irrad_map;

const float PI = 3.1415926535897932384626433832795;

const vec3 view_pos = vec3(0, 0, 0);

const vec3 view_target[6] = {vec3(1, 0, 0), vec3(-1, 0, 0), vec3(0, -1, 0), vec3(0, 1, 0), vec3(0, 0, 1), vec3(0, 0, -1)};

const vec3 view_up[6] = {vec3(0, 1, 0), vec3(0, 1, 0), vec3(0, 0, 1), // +Y
    vec3(0, 0, -1),                                                   // -Y
    vec3(0, 1, 0), vec3(0, 1, 0)};

mat4 look_at(vec3 pos, vec3 target, vec3 world_up) {
    vec3 fwd = normalize(target - pos);
    vec3 right = cross(world_up, fwd);
    vec3 up = cross(fwd, right);
    return mat4(vec4(right, 0), vec4(up, 0), vec4(fwd, 0), vec4(pos, 1));
}

// Remaps uv coordinates to a position in range [-1, 1]
vec2 uv_to_quad_pos(vec2 uv) {
    return uv * 2.0f - 1.0f;
}

vec3 to_local_direction(vec2 uv, int face) {
    mat4 view = look_at(view_pos, view_target[face], view_up[face]);
    return (view * vec4(uv_to_quad_pos(uv), 1, 1)).xyz;
}

void main() {
    for (int face = 0; face < 6; ++face) {
        int face_size = imageSize(irrad_map).x;
        vec2 uv = clamp(vec2(gl_GlobalInvocationID.xy) / float(face_size), vec2(0), vec2(1));

        vec3 local_direction = normalize(to_local_direction(uv, face));
        local_direction.y = -local_direction.y;

        vec3 N = normalize(local_direction);

        vec3 irradiance = vec3(0.0);

        vec3 up = vec3(0.0, 1.0, 0.0);
        vec3 right = normalize(cross(up, N));
        up = normalize(cross(N, right));

        //float sample_delta = 0.025;
        float sample_delta = 0.001;
        uint num_samples = 0;
        for (float phi = 0.0; phi < 2.0 * PI; phi += sample_delta) {
            for (float theta = 0.0; theta < 0.5 * PI; theta += sample_delta) {
                vec3 temp_vec = cos(phi) * right + sin(phi) * up;
                vec3 sample_vec = cos(theta) * N + sin(theta) * temp_vec;
                irradiance += texture(env_map, sample_vec).rgb * cos(theta) * sin(theta);
                num_samples++;
            }
        }

        irradiance = PI * irradiance * (1.0 / float(num_samples));

        ivec3 cube_texels = ivec3(uv * face_size, face);
        imageStore(irrad_map, cube_texels, vec4(irradiance, 1));
    }
}
